// Code generated by apigen; DO NOT EDIT.
{{ $client := .Client -}}
{{ $groups := .Client.API.Groups -}}
package {{ $client.GoPackage }}

import (
    "context"
	"encoding/json"
    "io"
	"net/http"

    "github.com/gorilla/mux"

    "{{ $client.GoModule }}/api"
    "{{ $client.GoModule }}/auth/user"
)

type Fetcher interface {
    Get(ctx context.Context, path string) (*http.Response, error)
    Post(ctx context.Context, path string, body io.Reader) (*http.Response, error)
}

type Endpoints struct {
{{ range $group := $groups -}}
	{{ $group.Name }} {{ $group.Name }}
{{ end -}}
}

func NewEndpoints(f Fetcher) Endpoints {
    return Endpoints{
    {{ range $group := $groups -}}
        {{ $group.Name }}: {{ $group.Name }}{f},
    {{ end -}}
    }
}

{{ range $group := $groups -}}
type {{ $group.Name }} struct {
    f Fetcher
}

{{ range $route := $group.Routes }}
func (g {{ $group.Name }}) {{ $route.Name }}(ctx context.Context
    {{- with $route.Params}}, params {{.}}{{end -}}
    {{- with $route.Body}}, body {{.}}{{end -}}
) ({{ $route.Return }}, error) {
    var val {{ $route.Return }}

    {{ if $route.Params -}}
    url, err := (&mux.Route{}).Path("{{ $route.Path }}").URL(api.Pairs(params)...)
    if err != nil {
        return val, err
    }
    path := url.String()
    {{- else -}}
    path := "{{ $route.Path }}"
    {{- end }}

    {{ if eq $route.Method "GET" -}}
    res, err := g.f.Get(ctx, path)
    {{- else if eq $route.Method "POST" -}}
    var b bytes.Buffer
    if err := json.NewEncoder(&b).Encode(body); err != nil {
        return val, err
    }
    res, err := g.f.Post(ctx, path, &b)
    {{- end }}
    if err != nil {
        return val, err
    }

    return val, parse(res, &val)
}
{{ end -}}
{{ end -}}
