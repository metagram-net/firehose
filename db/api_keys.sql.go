// Code generated by sqlc. DO NOT EDIT.
// source: api_keys.sql

package db

import (
	"context"

	"github.com/gofrs/uuid"
)

const apiKeyCreate = `-- name: ApiKeyCreate :one
insert into api_keys (name, user_id, hashed_secret) values ($1, $2, $3) returning id, user_id, name, hashed_secret, created_at, updated_at
`

type ApiKeyCreateParams struct {
	Name         string
	UserID       uuid.UUID
	HashedSecret []byte
}

func (q *Queries) ApiKeyCreate(ctx context.Context, arg ApiKeyCreateParams) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, apiKeyCreate, arg.Name, arg.UserID, arg.HashedSecret)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.HashedSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const apiKeyFind = `-- name: ApiKeyFind :one
select id, user_id, name, hashed_secret, created_at, updated_at from api_keys where user_id = $1 and hashed_secret = $2
`

type ApiKeyFindParams struct {
	UserID       uuid.UUID
	HashedSecret []byte
}

func (q *Queries) ApiKeyFind(ctx context.Context, arg ApiKeyFindParams) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, apiKeyFind, arg.UserID, arg.HashedSecret)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.HashedSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
