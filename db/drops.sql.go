// Code generated by sqlc. DO NOT EDIT.
// source: drops.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/gofrs/uuid"
	"github.com/lib/pq"
)

const dropCreate = `-- name: DropCreate :one
insert into drops
(user_id, title, url, status, moved_at)
values ($1, $2, $3, $4, $5)
returning id, user_id, title, url, status, moved_at, created_at, updated_at
`

type DropCreateParams struct {
	UserID  uuid.UUID
	Title   sql.NullString
	URL     string
	Status  DropStatus
	MovedAt time.Time
}

func (q *Queries) DropCreate(ctx context.Context, arg DropCreateParams) (Drop, error) {
	row := q.db.QueryRowContext(ctx, dropCreate,
		arg.UserID,
		arg.Title,
		arg.URL,
		arg.Status,
		arg.MovedAt,
	)
	var i Drop
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.URL,
		&i.Status,
		&i.MovedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const dropDelete = `-- name: DropDelete :one
delete from drops where user_id = $1 and id = $2 returning id, user_id, title, url, status, moved_at, created_at, updated_at
`

type DropDeleteParams struct {
	UserID uuid.UUID
	ID     uuid.UUID
}

func (q *Queries) DropDelete(ctx context.Context, arg DropDeleteParams) (Drop, error) {
	row := q.db.QueryRowContext(ctx, dropDelete, arg.UserID, arg.ID)
	var i Drop
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.URL,
		&i.Status,
		&i.MovedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const dropFind = `-- name: DropFind :one
select id, user_id, title, url, status, moved_at, created_at, updated_at from drops
where user_id = $1 and id = $2
`

type DropFindParams struct {
	UserID uuid.UUID
	ID     uuid.UUID
}

func (q *Queries) DropFind(ctx context.Context, arg DropFindParams) (Drop, error) {
	row := q.db.QueryRowContext(ctx, dropFind, arg.UserID, arg.ID)
	var i Drop
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.URL,
		&i.Status,
		&i.MovedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const dropList = `-- name: DropList :many
select id, user_id, title, url, status, moved_at, created_at, updated_at from drops
where user_id = $1 and status = ANY($3::drop_status[])
order by moved_at asc
limit $2
`

type DropListParams struct {
	UserID   uuid.UUID
	Limit    int32
	Statuses []DropStatus
}

func (q *Queries) DropList(ctx context.Context, arg DropListParams) ([]Drop, error) {
	rows, err := q.db.QueryContext(ctx, dropList, arg.UserID, arg.Limit, pq.Array(arg.Statuses))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Drop
	for rows.Next() {
		var i Drop
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.URL,
			&i.Status,
			&i.MovedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const dropMove = `-- name: DropMove :one
update drops
set status = $3, moved_at = $4
where user_id = $1 and id = $2
returning id, user_id, title, url, status, moved_at, created_at, updated_at
`

type DropMoveParams struct {
	UserID  uuid.UUID
	ID      uuid.UUID
	Status  DropStatus
	MovedAt time.Time
}

func (q *Queries) DropMove(ctx context.Context, arg DropMoveParams) (Drop, error) {
	row := q.db.QueryRowContext(ctx, dropMove,
		arg.UserID,
		arg.ID,
		arg.Status,
		arg.MovedAt,
	)
	var i Drop
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.URL,
		&i.Status,
		&i.MovedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const dropNext = `-- name: DropNext :one
select id, user_id, title, url, status, moved_at, created_at, updated_at from drops
where user_id = $1 and status = 'unread'
order by moved_at asc
`

func (q *Queries) DropNext(ctx context.Context, userID uuid.UUID) (Drop, error) {
	row := q.db.QueryRowContext(ctx, dropNext, userID)
	var i Drop
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.URL,
		&i.Status,
		&i.MovedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
