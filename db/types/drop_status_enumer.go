// Code generated by "enumer -output=drop_status_enumer.go -type=DropStatus -json -sql -linecomment"; DO NOT EDIT.

//
package types

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _DropStatusName = "unreadreadsaved"

var _DropStatusIndex = [...]uint8{0, 6, 10, 15}

func (i DropStatus) String() string {
	i -= 1
	if i < 0 || i >= DropStatus(len(_DropStatusIndex)-1) {
		return fmt.Sprintf("DropStatus(%d)", i+1)
	}
	return _DropStatusName[_DropStatusIndex[i]:_DropStatusIndex[i+1]]
}

var _DropStatusValues = []DropStatus{1, 2, 3}

var _DropStatusNameToValueMap = map[string]DropStatus{
	_DropStatusName[0:6]:   1,
	_DropStatusName[6:10]:  2,
	_DropStatusName[10:15]: 3,
}

// DropStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DropStatusString(s string) (DropStatus, error) {
	if val, ok := _DropStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DropStatus values", s)
}

// DropStatusValues returns all values of the enum
func DropStatusValues() []DropStatus {
	return _DropStatusValues
}

// IsADropStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DropStatus) IsADropStatus() bool {
	for _, v := range _DropStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DropStatus
func (i DropStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DropStatus
func (i *DropStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DropStatus should be a string, got %s", data)
	}

	var err error
	*i, err = DropStatusString(s)
	return err
}

func (i DropStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *DropStatus) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := DropStatusString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
