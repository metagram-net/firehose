// Code generated by apigen; DO NOT EDIT.
package server

import (
	"net/http"

	"github.com/gorilla/mux"

	"github.com/metagram-net/firehose/api"
	"github.com/metagram-net/firehose/auth/user"
	"github.com/metagram-net/firehose/drop"
	"github.com/metagram-net/firehose/wellknown"
)

type Handler struct {
	WellKnown WellKnown
	Auth      Auth
	Drops     Drops
}

type WellKnown interface {
	HealthCheck(ctx api.Context) (wellknown.HealthCheckResponse, error)
}

type Auth interface {
	Whoami(ctx api.Context, user api.User) (user.User, error)
}

type Drops interface {
	Next(ctx api.Context, user api.User) (drop.Drop, error)
	Get(ctx api.Context, user api.User, params drop.GetParams) (drop.Drop, error)
	List(ctx api.Context, user api.User, body drop.ListBody) (drop.ListResponse, error)
	Create(ctx api.Context, user api.User, body drop.CreateBody) (drop.Drop, error)
	Update(ctx api.Context, user api.User, body drop.UpdateBody) (drop.Drop, error)
	Move(ctx api.Context, user api.User, body drop.MoveBody) (drop.Drop, error)
	Delete(ctx api.Context, user api.User, body drop.DeleteBody) (drop.Drop, error)
}

func Register(srv *api.Server, h Handler) *mux.Router {
	r := mux.NewRouter()

	r.Methods(http.MethodGet).Path("/.well-known/health-check").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx, err := srv.Context(r)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}

		res, err := h.WellKnown.HealthCheck(ctx)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}
		srv.Respond(w, res, ctx.Close())
	})

	r.Methods(http.MethodGet).Path("/auth/whoami").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx, err := srv.Context(r)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}

		user, err := srv.Authenticate(ctx, r)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}

		res, err := h.Auth.Whoami(ctx, *user)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}
		srv.Respond(w, res, ctx.Close())
	})

	r.Methods(http.MethodGet).Path("/v1/drops/next").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx, err := srv.Context(r)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}

		user, err := srv.Authenticate(ctx, r)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}

		res, err := h.Drops.Next(ctx, *user)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}
		srv.Respond(w, res, ctx.Close())
	})

	r.Methods(http.MethodGet).Path("/v1/drops/get/{id}").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx, err := srv.Context(r)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}

		user, err := srv.Authenticate(ctx, r)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}

		var params drop.GetParams
		if err := api.FromVars(mux.Vars(r), &params); err != nil {
			srv.Respond(w, nil, err)
			return
		}

		res, err := h.Drops.Get(ctx, *user, params)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}
		srv.Respond(w, res, ctx.Close())
	})

	r.Methods(http.MethodPost).Path("/v1/drops/list").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx, err := srv.Context(r)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}

		user, err := srv.Authenticate(ctx, r)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}

		var body drop.ListBody
		if err := api.FromBody(r.Body, &body); err != nil {
			srv.Respond(w, nil, err)
			return
		}

		res, err := h.Drops.List(ctx, *user, body)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}
		srv.Respond(w, res, ctx.Close())
	})

	r.Methods(http.MethodPost).Path("/v1/drops/create").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx, err := srv.Context(r)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}

		user, err := srv.Authenticate(ctx, r)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}

		var body drop.CreateBody
		if err := api.FromBody(r.Body, &body); err != nil {
			srv.Respond(w, nil, err)
			return
		}

		res, err := h.Drops.Create(ctx, *user, body)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}
		srv.Respond(w, res, ctx.Close())
	})

	r.Methods(http.MethodPost).Path("/v1/drops/update").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx, err := srv.Context(r)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}

		user, err := srv.Authenticate(ctx, r)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}

		var body drop.UpdateBody
		if err := api.FromBody(r.Body, &body); err != nil {
			srv.Respond(w, nil, err)
			return
		}

		res, err := h.Drops.Update(ctx, *user, body)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}
		srv.Respond(w, res, ctx.Close())
	})

	r.Methods(http.MethodPost).Path("/v1/drops/move").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx, err := srv.Context(r)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}

		user, err := srv.Authenticate(ctx, r)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}

		var body drop.MoveBody
		if err := api.FromBody(r.Body, &body); err != nil {
			srv.Respond(w, nil, err)
			return
		}

		res, err := h.Drops.Move(ctx, *user, body)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}
		srv.Respond(w, res, ctx.Close())
	})

	r.Methods(http.MethodPost).Path("/v1/drops/delete").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx, err := srv.Context(r)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}

		user, err := srv.Authenticate(ctx, r)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}

		var body drop.DeleteBody
		if err := api.FromBody(r.Body, &body); err != nil {
			srv.Respond(w, nil, err)
			return
		}

		res, err := h.Drops.Delete(ctx, *user, body)
		if err != nil {
			srv.Respond(w, nil, err)
			return
		}
		srv.Respond(w, res, ctx.Close())
	})

	return r
}
